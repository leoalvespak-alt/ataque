const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_KEY s√£o necess√°rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testarConfiguracaoCompleta() {
    console.log('üîç Testando configura√ß√£o completa do sistema...\n');

    try {
        // 1. Testar conex√£o
        console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
        const { data: testData, error: testError } = await supabase
            .from('usuarios')
            .select('count')
            .limit(1);
        
        if (testError) {
            console.error('‚ùå Erro na conex√£o:', testError.message);
            return;
        }
        console.log('‚úÖ Conex√£o estabelecida com sucesso\n');

        // 2. Verificar tabelas criadas
        console.log('2Ô∏è‚É£ Verificando tabelas criadas...');
        const tabelasParaVerificar = [
            'configuracoes_logo',
            'notificacoes', 
            'usuarios_notificacoes',
            'dicas_estudo'
        ];

        for (const tabela of tabelasParaVerificar) {
            const { data, error } = await supabase
                .from(tabela)
                .select('*')
                .limit(1);
            
            if (error) {
                console.log(`‚ùå Tabela ${tabela}: ${error.message}`);
            } else {
                console.log(`‚úÖ Tabela ${tabela}: OK`);
            }
        }
        console.log('');

        // 3. Verificar fun√ß√µes criadas
        console.log('3Ô∏è‚É£ Verificando fun√ß√µes criadas...');
        const funcoesParaVerificar = [
            'get_estatisticas_dashboard',
            'get_estatisticas_por_disciplina',
            'get_estatisticas_por_assunto',
            'get_notificacoes_dashboard',
            'marcar_notificacao_lida_segura'
        ];

        for (const funcao of funcoesParaVerificar) {
            try {
                const { data, error } = await supabase.rpc(funcao);
                if (error) {
                    console.log(`‚ùå Fun√ß√£o ${funcao}: ${error.message}`);
                } else {
                    console.log(`‚úÖ Fun√ß√£o ${funcao}: OK`);
                }
            } catch (err) {
                console.log(`‚ùå Fun√ß√£o ${funcao}: ${err.message}`);
            }
        }
        console.log('');

        // 4. Verificar configura√ß√µes de logo
        console.log('4Ô∏è‚É£ Verificando configura√ß√µes de logo...');
        const { data: logoConfig, error: logoError } = await supabase
            .from('configuracoes_logo')
            .select('*');

        if (logoError) {
            console.log(`‚ùå Configura√ß√µes de logo: ${logoError.message}`);
        } else {
            console.log(`‚úÖ Configura√ß√µes de logo: ${logoConfig.length} registros encontrados`);
            logoConfig.forEach(config => {
                console.log(`   - ${config.tipo}: ${config.url}`);
            });
        }
        console.log('');

        // 5. Verificar dicas de estudo
        console.log('5Ô∏è‚É£ Verificando dicas de estudo...');
        const { data: dicas, error: dicasError } = await supabase
            .from('dicas_estudo')
            .select('*')
            .eq('ativo', true);

        if (dicasError) {
            console.log(`‚ùå Dicas de estudo: ${dicasError.message}`);
        } else {
            console.log(`‚úÖ Dicas de estudo: ${dicas.length} dicas ativas encontradas`);
        }
        console.log('');

        // 6. Verificar storage buckets
        console.log('6Ô∏è‚É£ Verificando buckets de storage...');
        const { data: buckets, error: bucketsError } = await supabase
            .storage
            .listBuckets();

        if (bucketsError) {
            console.log(`‚ùå Buckets de storage: ${bucketsError.message}`);
        } else {
            const uploadsBucket = buckets.find(bucket => bucket.name === 'uploads');
            if (uploadsBucket) {
                console.log('‚úÖ Bucket "uploads" encontrado');
            } else {
                console.log('‚ùå Bucket "uploads" n√£o encontrado');
            }
        }
        console.log('');

        // 7. Testar fun√ß√£o de estat√≠sticas
        console.log('7Ô∏è‚É£ Testando fun√ß√£o de estat√≠sticas...');
        try {
            const { data: stats, error: statsError } = await supabase.rpc('get_estatisticas_dashboard');
            if (statsError) {
                console.log(`‚ùå Estat√≠sticas: ${statsError.message}`);
            } else {
                console.log('‚úÖ Fun√ß√£o de estat√≠sticas funcionando');
                if (stats && stats.length > 0) {
                    console.log(`   - Total de respostas: ${stats[0].total_respostas || 0}`);
                    console.log(`   - XP total: ${stats[0].xp_total || 0}`);
                }
            }
        } catch (err) {
            console.log(`‚ùå Estat√≠sticas: ${err.message}`);
        }
        console.log('');

        console.log('üéâ Teste de configura√ß√£o conclu√≠do!');
        console.log('\nüìã Resumo:');
        console.log('- Tabelas adicionais criadas');
        console.log('- Fun√ß√µes de dashboard implementadas');
        console.log('- Configura√ß√µes de logo configuradas');
        console.log('- Dicas de estudo inseridas');
        console.log('- Sistema pronto para uso');

    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
    }
}

testarConfiguracaoCompleta();
