const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

console.log('üîç Verificando configura√ß√£o do Supabase...\n');

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas:');
    console.error(`   SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
    console.error(`   SUPABASE_ANON_KEY: ${supabaseKey ? '‚úÖ' : '‚ùå'}`);
    console.error('');
    console.error('üí° Solu√ß√£o:');
    console.error('1. Verifique se o arquivo .env existe na raiz do projeto');
    console.error('2. Verifique se as vari√°veis est√£o configuradas corretamente');
    process.exit(1);
}

console.log('‚úÖ Vari√°veis de ambiente encontradas');
console.log(`   URL: ${supabaseUrl}`);
console.log(`   Key: ${supabaseKey.substring(0, 20)}...`);
console.log('');

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarSupabase() {
    try {
        // 1. Testar conex√£o b√°sica
        console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
        const { data, error } = await supabase.from('usuarios').select('count').limit(1);
        
        if (error) {
            console.error('‚ùå Erro na conex√£o:', error.message);
            return;
        }
        
        console.log('‚úÖ Conex√£o com Supabase funcionando');
        console.log('');

        // 2. Verificar buckets de storage
        console.log('2Ô∏è‚É£ Verificando buckets de storage...');
        const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
        
        if (bucketsError) {
            console.error('‚ùå Erro ao listar buckets:', bucketsError.message);
            return;
        }

        console.log(`‚úÖ ${buckets.length} bucket(s) encontrado(s):`);
        buckets.forEach(bucket => {
            console.log(`   - ${bucket.name} (p√∫blico: ${bucket.public})`);
        });
        console.log('');

        // 3. Verificar se o bucket "uploads" existe
        const uploadsBucket = buckets.find(bucket => bucket.name === 'uploads');
        if (!uploadsBucket) {
            console.log('‚ùå Bucket "uploads" n√£o encontrado');
            console.log('');
            console.log('üí° Solu√ß√£o:');
            console.log('1. Acesse o painel do Supabase');
            console.log('2. V√° em Storage');
            console.log('3. Clique em "New bucket"');
            console.log('4. Nome: uploads');
            console.log('5. Marque "Public bucket"');
            console.log('6. Clique em "Create bucket"');
            console.log('');
            console.log('Depois execute:');
            console.log('node configurar-storage-policies.js');
            return;
        }

        console.log('‚úÖ Bucket "uploads" encontrado');
        console.log(`   - P√∫blico: ${uploadsBucket.public}`);
        console.log('');

        // 4. Verificar pol√≠ticas RLS
        console.log('3Ô∏è‚É£ Verificando pol√≠ticas RLS...');
        const { data: policies, error: policiesError } = await supabase
            .from('storage.objects')
            .select('*')
            .limit(1);

        if (policiesError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas (normal se n√£o h√° arquivos)');
        } else {
            console.log('‚úÖ Pol√≠ticas RLS configuradas');
        }
        console.log('');

        // 5. Testar upload simples
        console.log('4Ô∏è‚É£ Testando upload de arquivo...');
        const testContent = 'Teste de upload - ' + new Date().toISOString();
        const testFile = new Blob([testContent], { type: 'text/plain' });

        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('uploads')
            .upload(`test-${Date.now()}.txt`, testFile, {
                cacheControl: '3600',
                upsert: false
            });

        if (uploadError) {
            console.error('‚ùå Erro no upload:', uploadError.message);
            console.log('');
            console.log('üí° Poss√≠veis solu√ß√µes:');
            console.log('1. Execute o SQL para configurar pol√≠ticas:');
            console.log('   - Abra o painel do Supabase');
            console.log('   - V√° em SQL Editor');
            console.log('   - Execute o conte√∫do de configurar-storage-policies.sql');
            console.log('');
            console.log('2. Ou execute o script:');
            console.log('   node configurar-storage-policies.js');
            return;
        }

        console.log('‚úÖ Upload funcionando!');
        console.log(`   - Arquivo: ${uploadData.path}`);
        console.log('');

        // 6. Limpar arquivo de teste
        console.log('5Ô∏è‚É£ Limpando arquivo de teste...');
        await supabase.storage.from('uploads').remove([uploadData.path]);
        console.log('‚úÖ Arquivo de teste removido');
        console.log('');

        console.log('üéâ Verifica√ß√£o conclu√≠da com sucesso!');
        console.log('‚úÖ Supabase configurado corretamente');
        console.log('‚úÖ Storage funcionando');
        console.log('‚úÖ Pronto para upload de logo/favicon');

    } catch (error) {
        console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    }
}

verificarSupabase();
