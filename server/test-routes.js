const axios = require('axios');

const BASE_URL = 'http://localhost:3002/api';
let authToken = null;

// Fun√ß√£o para fazer login e obter token
async function login() {
  try {
    console.log('üîê Fazendo login...');
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@example.com',
      senha: 'admin123'
    });
    
    authToken = response.data.token;
    console.log('‚úÖ Login realizado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no login:', error.response?.data || error.message);
    return false;
  }
}

// Fun√ß√£o para testar uma rota
async function testRoute(method, endpoint, data = null, description = '') {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {}
    };

    if (authToken) {
      config.headers.Authorization = `Bearer ${authToken}`;
    }

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    console.log(`‚úÖ ${description || `${method} ${endpoint}`} - Status: ${response.status}`);
    return true;
  } catch (error) {
    console.error(`‚ùå ${description || `${method} ${endpoint}`} - Erro: ${error.response?.status} - ${error.response?.data?.message || error.message}`);
    return false;
  }
}

// Fun√ß√£o principal de teste
async function testAllRoutes() {
  console.log('üöÄ Iniciando testes das rotas da API...\n');

  // Testar login
  const loginSuccess = await login();
  if (!loginSuccess) {
    console.log('‚ùå Falha no login, abortando testes');
    return;
  }

  console.log('\nüìã Testando rotas p√∫blicas...');
  
  // Rotas p√∫blicas
  await testRoute('GET', '/health', null, 'Health Check');
  await testRoute('GET', '/categories/todas', null, 'Buscar todas as categorias');
  await testRoute('GET', '/categories/disciplinas', null, 'Buscar disciplinas');
  await testRoute('GET', '/categories/bancas', null, 'Buscar bancas');
  await testRoute('GET', '/categories/orgaos', null, 'Buscar √≥rg√£os');
  await testRoute('GET', '/questions', null, 'Buscar quest√µes');
  await testRoute('GET', '/planos', null, 'Buscar planos');

  console.log('\nüîê Testando rotas autenticadas...');
  
  // Rotas autenticadas
  await testRoute('GET', '/users/me', null, 'Buscar dados do usu√°rio');
  await testRoute('GET', '/users/perfil', null, 'Buscar perfil do usu√°rio');
  await testRoute('GET', '/users/estatisticas', null, 'Buscar estat√≠sticas');
  await testRoute('GET', '/users/ranking', null, 'Buscar ranking');
  await testRoute('GET', '/admin/dashboard', null, 'Dashboard admin');
  await testRoute('GET', '/admin/usuarios', null, 'Listar usu√°rios (admin)');
  await testRoute('GET', '/admin/questoes', null, 'Listar quest√µes (admin)');
  await testRoute('GET', '/admin/disciplinas', null, 'Listar disciplinas (admin)');
  await testRoute('GET', '/admin/assuntos', null, 'Listar assuntos (admin)');
  await testRoute('GET', '/admin/bancas', null, 'Listar bancas (admin)');
  await testRoute('GET', '/admin/orgaos', null, 'Listar √≥rg√£os (admin)');

  console.log('\nüìù Testando rotas de coment√°rios e avalia√ß√µes...');
  
  // Rotas de coment√°rios e avalia√ß√µes
  await testRoute('GET', '/comentarios?questao_id=1', null, 'Buscar coment√°rios de uma quest√£o');
  await testRoute('GET', '/avaliacoes?questao_id=1', null, 'Buscar avalia√ß√µes de uma quest√£o');
  await testRoute('GET', '/avaliacoes/estatisticas/1', null, 'Buscar estat√≠sticas de avalia√ß√£o');

  console.log('\nüì§ Testando rotas de upload...');
  
  // Rotas de upload
  await testRoute('DELETE', '/upload/profile-picture', null, 'Remover foto de perfil');

  console.log('\nüéØ Testando rotas espec√≠ficas...');
  
  // Testar resposta de quest√£o
  await testRoute('POST', '/questions/1/responder', {
    alternativa_marcada: 'A',
    tempo_resposta: 30
  }, 'Responder quest√£o');

  // Testar cria√ß√£o de coment√°rio
  await testRoute('POST', '/comentarios', {
    questao_id: 1,
    texto: 'Teste de coment√°rio',
    tipo: 'DUVIDA'
  }, 'Criar coment√°rio');

  // Testar cria√ß√£o de avalia√ß√£o
  await testRoute('POST', '/avaliacoes', {
    questao_id: 1,
    nota: 5
  }, 'Criar avalia√ß√£o');

  console.log('\n‚úÖ Testes conclu√≠dos!');
  console.log('\nüìä Resumo:');
  console.log('- Se voc√™ viu muitos ‚úÖ, as rotas est√£o funcionando corretamente');
  console.log('- Se voc√™ viu alguns ‚ùå, verifique se o banco de dados est√° configurado');
  console.log('- Alguns erros 404 s√£o normais se n√£o houver dados no banco');
}

// Executar testes
testAllRoutes().catch(console.error);
