const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY; // Usar service key para criar bucket

console.log('üîß Configurando storage e pol√≠ticas RLS...\n');

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o encontradas:');
    console.error(`   SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
    console.error(`   SUPABASE_SERVICE_KEY: ${supabaseKey ? '‚úÖ' : '‚ùå'}`);
    console.error('');
    console.error('üí° Solu√ß√£o:');
    console.error('1. Verifique se o arquivo .env existe');
    console.error('2. Substitua SUPABASE_SERVICE_KEY pela sua service key real');
    console.error('3. Para obter a service key:');
    console.error('   - Acesse: https://supabase.com/dashboard');
    console.error('   - V√° em Settings > API');
    console.error('   - Copie a "service_role" key');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function configurarStorage() {
    try {
        // 1. Criar bucket "uploads"
        console.log('1Ô∏è‚É£ Criando bucket "uploads"...');
        const { data: bucketData, error: bucketError } = await supabase.storage.createBucket('uploads', {
            public: true,
            allowedMimeTypes: ['image/*', 'text/plain'],
            fileSizeLimit: 5242880 // 5MB
        });

        if (bucketError) {
            if (bucketError.message.includes('already exists')) {
                console.log('‚úÖ Bucket "uploads" j√° existe');
            } else {
                console.error('‚ùå Erro ao criar bucket:', bucketError.message);
                return;
            }
        } else {
            console.log('‚úÖ Bucket "uploads" criado com sucesso');
        }
        console.log('');

        // 2. Configurar pol√≠ticas RLS via SQL
        console.log('2Ô∏è‚É£ Configurando pol√≠ticas RLS...');
        
        // Pol√≠ticas SQL para configurar
        const policiesSQL = `
            -- Remover pol√≠ticas existentes (se houver)
            DROP POLICY IF EXISTS "Public Access" ON storage.objects;
            DROP POLICY IF EXISTS "Authenticated users can upload files" ON storage.objects;
            DROP POLICY IF EXISTS "Anyone can view files" ON storage.objects;
            DROP POLICY IF EXISTS "Users can upload their own files" ON storage.objects;
            DROP POLICY IF EXISTS "Users can update their own files" ON storage.objects;
            DROP POLICY IF EXISTS "Users can delete their own files" ON storage.objects;

            -- Criar pol√≠tica para permitir visualiza√ß√£o p√∫blica de arquivos
            CREATE POLICY "Anyone can view files" ON storage.objects
                FOR SELECT USING (bucket_id = 'uploads');

            -- Criar pol√≠tica para permitir upload de arquivos autenticados
            CREATE POLICY "Authenticated users can upload files" ON storage.objects
                FOR INSERT WITH CHECK (
                    bucket_id = 'uploads' 
                    AND auth.role() = 'authenticated'
                );

            -- Criar pol√≠tica para permitir atualiza√ß√£o de arquivos pelo propriet√°rio
            CREATE POLICY "Users can update their own files" ON storage.objects
                FOR UPDATE USING (
                    bucket_id = 'uploads' 
                    AND auth.uid() = owner
                );

            -- Criar pol√≠tica para permitir exclus√£o de arquivos pelo propriet√°rio
            CREATE POLICY "Users can delete their own files" ON storage.objects
                FOR DELETE USING (
                    bucket_id = 'uploads' 
                    AND auth.uid() = owner
                );
        `;

        // Executar SQL via RPC (se dispon√≠vel) ou instruir usu√°rio
        console.log('‚ö†Ô∏è  Para configurar as pol√≠ticas RLS, execute este SQL no painel do Supabase:');
        console.log('');
        console.log('1. Acesse: https://supabase.com/dashboard');
        console.log('2. Selecione seu projeto');
        console.log('3. V√° em SQL Editor');
        console.log('4. Cole e execute o seguinte SQL:');
        console.log('');
        console.log('--- IN√çCIO DO SQL ---');
        console.log(policiesSQL);
        console.log('--- FIM DO SQL ---');
        console.log('');

        // 3. Testar configura√ß√£o
        console.log('3Ô∏è‚É£ Testando configura√ß√£o...');
        
        // Usar anon key para testar upload
        const supabaseAnon = createClient(supabaseUrl, process.env.SUPABASE_ANON_KEY);
        
        const testContent = 'Teste de configura√ß√£o - ' + new Date().toISOString();
        const testFile = new Blob([testContent], { type: 'text/plain' });

        const { data: uploadData, error: uploadError } = await supabaseAnon.storage
            .from('uploads')
            .upload(`test-config-${Date.now()}.txt`, testFile, {
                cacheControl: '3600',
                upsert: false
            });

        if (uploadError) {
            console.log('‚ö†Ô∏è  Upload falhou (normal se pol√≠ticas n√£o foram configuradas ainda):');
            console.log(`   Erro: ${uploadError.message}`);
            console.log('');
            console.log('üí° Execute o SQL acima primeiro, depois teste novamente');
        } else {
            console.log('‚úÖ Upload funcionando!');
            console.log(`   - Arquivo: ${uploadData.path}`);
            
            // Limpar arquivo de teste
            await supabaseAnon.storage.from('uploads').remove([uploadData.path]);
            console.log('‚úÖ Arquivo de teste removido');
        }
        console.log('');

        console.log('üéâ Configura√ß√£o conclu√≠da!');
        console.log('');
        console.log('üìã Pr√≥ximos passos:');
        console.log('1. Execute o SQL no painel do Supabase');
        console.log('2. Teste novamente: node verificar-supabase.js');
        console.log('3. Teste upload de logo/favicon no frontend');

    } catch (error) {
        console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
    }
}

configurarStorage();
