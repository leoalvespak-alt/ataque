const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://cfwyuomeaudpnmjosetq.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmd3l1b21lYXVkcG5tam9zZXRxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTA1MTIyNiwiZXhwIjoyMDcwNjI3MjI2fQ.4tE2STnUzVSR1OcsNCxWUEkiPG6Sph4-OUnA9h54gf8';

// Criar cliente Supabase com role de servi√ßo
const supabase = createClient(supabaseUrl, supabaseKey);

async function executarCorrecoes() {
  console.log('üöÄ Iniciando corre√ß√µes completas do sistema...\n');

  try {
    // 1. Ler o arquivo SQL de corre√ß√µes
    const sqlFile = path.join(__dirname, 'corrigir-problemas-completos.sql');
    const sqlContent = fs.readFileSync(sqlFile, 'utf8');

    console.log('üìã Executando corre√ß√µes SQL...');
    
    // Dividir o SQL em comandos individuais
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      if (command.trim()) {
        try {
          console.log(`\nüîß Executando comando ${i + 1}/${commands.length}...`);
          
          const { data, error } = await supabase.rpc('exec_sql', {
            sql_query: command
          });

          if (error) {
            console.error(`‚ùå Erro no comando ${i + 1}:`, error.message);
            errorCount++;
          } else {
            console.log(`‚úÖ Comando ${i + 1} executado com sucesso`);
            successCount++;
          }
        } catch (err) {
          console.error(`‚ùå Erro ao executar comando ${i + 1}:`, err.message);
          errorCount++;
        }
      }
    }

    console.log(`\nüìä Resumo da execu√ß√£o:`);
    console.log(`‚úÖ Comandos executados com sucesso: ${successCount}`);
    console.log(`‚ùå Comandos com erro: ${errorCount}`);

    // 2. Verificar se as fun√ß√µes foram criadas
    console.log('\nüîç Verificando fun√ß√µes criadas...');
    
    const funcoesParaVerificar = [
      'get_estatisticas_dashboard',
      'get_estatisticas_por_disciplina',
      'get_estatisticas_por_assunto',
      'get_notificacoes_dashboard',
      'marcar_notificacao_lida_segura'
    ];

    for (const funcao of funcoesParaVerificar) {
      try {
        const { data, error } = await supabase
          .from('information_schema.routines')
          .select('routine_name, routine_type')
          .eq('routine_name', funcao)
          .eq('routine_schema', 'public');

        if (error) {
          console.log(`‚ùå Erro ao verificar fun√ß√£o ${funcao}:`, error.message);
        } else if (data && data.length > 0) {
          console.log(`‚úÖ Fun√ß√£o ${funcao} encontrada`);
        } else {
          console.log(`‚ö†Ô∏è  Fun√ß√£o ${funcao} n√£o encontrada`);
        }
      } catch (err) {
        console.log(`‚ùå Erro ao verificar fun√ß√£o ${funcao}:`, err.message);
      }
    }

    // 3. Verificar tabelas criadas
    console.log('\nüîç Verificando tabelas criadas...');
    
    const tabelasParaVerificar = [
      'configuracoes_logo',
      'notificacoes',
      'usuarios_notificacoes',
      'dicas_estudo'
    ];

    for (const tabela of tabelasParaVerificar) {
      try {
        const { data, error } = await supabase
          .from(tabela)
          .select('*')
          .limit(1);

        if (error) {
          console.log(`‚ùå Erro ao verificar tabela ${tabela}:`, error.message);
        } else {
          console.log(`‚úÖ Tabela ${tabela} acess√≠vel`);
        }
      } catch (err) {
        console.log(`‚ùå Erro ao verificar tabela ${tabela}:`, err.message);
      }
    }

    // 4. Testar fun√ß√µes com dados de exemplo
    console.log('\nüß™ Testando fun√ß√µes...');
    
    try {
      const { data: estatisticas, error: estatError } = await supabase
        .rpc('get_estatisticas_dashboard');

      if (estatError) {
        console.log('‚ùå Erro ao testar get_estatisticas_dashboard:', estatError.message);
      } else {
        console.log('‚úÖ get_estatisticas_dashboard funcionando');
        console.log('üìä Dados retornados:', estatisticas);
      }
    } catch (err) {
      console.log('‚ùå Erro ao testar fun√ß√£o:', err.message);
    }

    // 5. Verificar bucket de storage
    console.log('\nüîç Verificando bucket de storage...');
    
    try {
      const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
      
      if (bucketError) {
        console.log('‚ùå Erro ao listar buckets:', bucketError.message);
      } else {
        console.log('üì¶ Buckets dispon√≠veis:', buckets.map(b => b.name));
        
        const uploadsBucket = buckets.find(b => b.name === 'uploads');
        if (uploadsBucket) {
          console.log('‚úÖ Bucket "uploads" encontrado');
        } else {
          console.log('‚ö†Ô∏è  Bucket "uploads" n√£o encontrado - ser√° necess√°rio criar manualmente');
        }
      }
    } catch (err) {
      console.log('‚ùå Erro ao verificar buckets:', err.message);
    }

    console.log('\nüéâ Corre√ß√µes completas finalizadas!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Verifique se todas as fun√ß√µes foram criadas corretamente');
    console.log('2. Crie o bucket "uploads" no painel do Supabase se n√£o existir');
    console.log('3. Configure as pol√≠ticas de RLS para o bucket de storage');
    console.log('4. Teste o upload de arquivos na p√°gina de configura√ß√µes');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar corre√ß√µes
executarCorrecoes().catch(console.error);
