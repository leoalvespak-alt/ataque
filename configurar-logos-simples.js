const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://cfwyuomeaudpnmjosetq.supabase.co';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmd3l1b21lYXVkcG5tam9zZXRxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwNTEyMjYsImV4cCI6MjA3MDYyNzIyNn0.4tE2STnUzVSR1OcsNCxWUEkiPG6Sph4-OUnA9h54gf8';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function configurarLogosSimples() {
  try {
    console.log('üöÄ Configurando logos da plataforma...\n');

    // 1. Verificar se a tabela configuracoes_logo existe
    console.log('üóÑÔ∏è  Verificando tabela "configuracoes_logo"...');
    const { data: existingConfigs, error: tableError } = await supabase
      .from('configuracoes_logo')
      .select('*')
      .limit(1);

    if (tableError) {
      console.error('‚ùå Erro ao verificar tabela configuracoes_logo:', tableError);
      console.log('‚ö†Ô∏è  Execute o script SQL primeiro para criar a tabela');
      return;
    }

    console.log('‚úÖ Tabela "configuracoes_logo" existe');

    // 2. Configurar URLs das logos
    const logoConfigs = [
      {
        tipo: 'logo',
        url: 'https://cfwyuomeaudpnmjosetq.supabase.co/storage/v1/object/public/uploads/logos/ATAQUE.png',
        nome_arquivo: 'ATAQUE.png',
        ativo: true
      },
      {
        tipo: 'favicon',
        url: 'https://cfwyuomeaudpnmjosetq.supabase.co/storage/v1/object/public/uploads/logos/favicon-1755150122840.ico',
        nome_arquivo: 'favicon-1755150122840.ico',
        ativo: true
      }
    ];

    console.log('\nüîÑ Atualizando configura√ß√µes de logo...');

    // 3. Limpar configura√ß√µes existentes
    const { error: deleteError } = await supabase
      .from('configuracoes_logo')
      .delete()
      .neq('id', 0); // Deletar todos

    if (deleteError) {
      console.error('‚ùå Erro ao limpar configura√ß√µes existentes:', deleteError);
      return;
    }

    console.log('‚úÖ Configura√ß√µes existentes removidas');

    // 4. Inserir novas configura√ß√µes
    const { data: insertData, error: insertError } = await supabase
      .from('configuracoes_logo')
      .insert(logoConfigs)
      .select();

    if (insertError) {
      console.error('‚ùå Erro ao inserir configura√ß√µes:', insertError);
      return;
    }

    console.log('‚úÖ Configura√ß√µes de logo atualizadas com sucesso!');
    console.log('üìã Configura√ß√µes inseridas:', insertData);

    // 5. Verificar configura√ß√µes
    console.log('\nüîç Verificando configura√ß√µes...');
    const { data: finalConfigs, error: finalError } = await supabase
      .from('configuracoes_logo')
      .select('*')
      .eq('ativo', true)
      .order('tipo');

    if (finalError) {
      console.error('‚ùå Erro ao verificar configura√ß√µes finais:', finalError);
    } else {
      console.log('‚úÖ Configura√ß√µes finais:');
      finalConfigs.forEach(config => {
        console.log(`   - ${config.tipo}: ${config.url}`);
      });
    }

    // 6. Testar URLs p√∫blicas
    console.log('\nüåê Testando URLs p√∫blicas...');
    
    for (const config of logoConfigs) {
      try {
        const response = await fetch(config.url);
        if (response.ok) {
          console.log(`‚úÖ URL p√∫blica funcionando: ${config.tipo}`);
        } else {
          console.log(`‚ö†Ô∏è  URL p√∫blica n√£o acess√≠vel: ${config.tipo} (${response.status})`);
        }
      } catch (error) {
        console.log(`‚ùå Erro ao testar URL: ${config.tipo} - ${error.message}`);
      }
    }

    console.log('\nüéâ Configura√ß√£o das logos conclu√≠da!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Acesse o Dashboard do Supabase');
    console.log('2. V√° para Storage > Buckets');
    console.log('3. Crie um bucket chamado "uploads" (se n√£o existir)');
    console.log('4. Dentro do bucket, crie uma pasta chamada "logos"');
    console.log('5. Fa√ßa upload dos arquivos:');
    console.log('   - ATAQUE.png (logo principal)');
    console.log('   - favicon-1755150122840.ico (favicon)');
    console.log('6. Teste a aplica√ß√£o para confirmar que as logos est√£o carregando');

  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error);
  }
}

// Executar configura√ß√£o
configurarLogosSimples();
